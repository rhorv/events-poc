<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd">

  <bean id="rjs1SchemaRegistryProvider" class="events.formatter.schemaprovider.ConfluentSchemaRegistryBasedSchemaProvider">
    <constructor-arg value="http://localhost:8081" />
    <constructor-arg value="generic" />
    <constructor-arg value="#{T(events.formatter.family.rjs1.Rjs1Deserializer).NAME}" />
    <constructor-arg value="true" />
  </bean>

  <bean id="rjs1SchemaFileProvider" class="events.formatter.schemaprovider.FileBasedSchemaProvider">
    <constructor-arg value="src/main/resources/schema/rjs1/generic.json" />
    <constructor-arg><map/></constructor-arg>
    <constructor-arg value="true" />
  </bean>

  <bean id="hav1SchemaFileProvider" class="events.formatter.schemaprovider.FileBasedSchemaProvider">
    <constructor-arg value="src/main/resources/schema/hav1/generic.avsc" />
    <constructor-arg><map/></constructor-arg>
    <constructor-arg value="true" />
  </bean>

  <bean id="hav1SchemaRegistryProvider" class="events.formatter.schemaprovider.ConfluentSchemaRegistryBasedSchemaProvider">
    <constructor-arg value="http://localhost:8081" />
    <constructor-arg value="generic" />
    <constructor-arg value="#{T(events.formatter.family.hav1.Hav1Deserializer).NAME}" />
    <constructor-arg value="true" />
  </bean>

  <bean id="rjs1Deserializer" class="events.formatter.family.rjs1.Rjs1Deserializer">
    <constructor-arg ref="rjs1SchemaProvider"/>
  </bean>

  <bean id="rjs1Serializer" class="events.formatter.family.rjs1.Rjs1Serializer"/>
  <bean id="decoratedRjs1Serializer" class="events.formatter.family.rjs1.SerializedValidatorDecorator">
    <constructor-arg ref="rjs1Serializer"/>
    <constructor-arg ref="rjs1SchemaProvider"/>
  </bean>

  <bean id="hav1Serializer" class="events.formatter.family.hav1.Hav1Serializer">
    <constructor-arg ref="hav1SchemaProvider"/>
  </bean>
  <bean id="hav1Deserializer" class="events.formatter.family.hav1.Hav1Deserializer">
    <constructor-arg ref="hav1SchemaProvider"/>
  </bean>
  <bean id="messageFamilyAwareDeserializer" class="events.formatter.MessageFamilyAwareDeserializer">
    <constructor-arg>
      <map>
        <entry key="#{T(events.formatter.family.rjs1.Rjs1Deserializer).NAME}" value-ref="rjs1Deserializer"/>
        <entry key="#{T(events.formatter.family.hav1.Hav1Deserializer).NAME}" value-ref="hav1Deserializer"/>
      </map>
    </constructor-arg>
  </bean>

  <bean id="guavaDispatcher" class="events.dispatcher.guava.GuavaDispatcher">
  </bean>

  <bean id="rabbitConnectionFactory" class="com.rabbitmq.client.ConnectionFactory">
    <property name="username" value="admin"/>
    <property name="password" value="admin123"/>
    <property name="host" value="rabbitmq"/>
    <property name="port" value="5672"/>
    <property name="virtualHost" value="/"/>
  </bean>

  <bean id="kafkaConsumer" class="events.consumer.kafka.KafkaTopicConsumer">
    <constructor-arg ref="deserializer"/>
    <constructor-arg ref="dispatcher"/>
    <constructor-arg value="kafka:9092"/>
    <constructor-arg value="testtopic"/>
  </bean>
  <bean id="rabbitConsumer" class="events.consumer.rabbitmq.RabbitMqConsumer">
    <constructor-arg ref="deserializer"/>
    <constructor-arg ref="dispatcher"/>
    <constructor-arg ref="rabbitConnectionFactory"/>
    <constructor-arg value="testqueue"/>
  </bean>

  <bean id="kafkaEventPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="serializer"/>
    <constructor-arg value="kafka:9092"/>
    <constructor-arg value="testtopic"/>
  </bean>
  <bean id="kafkaCommandPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="serializer"/>
    <constructor-arg value="kafka:9092"/>
    <constructor-arg value="othertopic"/>
  </bean>
  <bean id="rabbitEventPublisher" class="events.publisher.rabbitmq.RabbitMqPublisher">
    <constructor-arg ref="serializer"/>
    <constructor-arg ref="rabbitConnectionFactory"/>
    <constructor-arg value="events"/>
  </bean>
  <bean id="rabbitCommandPublisher" class="events.publisher.rabbitmq.RabbitMqPublisher">
    <constructor-arg ref="serializer"/>
    <constructor-arg ref="rabbitConnectionFactory"/>
    <constructor-arg value="commands"/>
  </bean>
  <bean id="splitRabbitPublisher" class="events.publisher.SplitPublisher">
    <constructor-arg>
      <map>
        <entry key="event" value-ref="rabbitEventPublisher"/>
        <entry key="command" value-ref="rabbitCommandPublisher"/>
      </map>
    </constructor-arg>
  </bean>
  <bean id="splitKafkaPublisher" class="events.publisher.SplitPublisher">
    <constructor-arg>
      <map>
        <entry key="event" value-ref="kafkaEventPublisher"/>
        <entry key="command" value-ref="kafkaCommandPublisher"/>
      </map>
    </constructor-arg>
  </bean>

  <bean id="transactionChargeHandler" class="application.handler.TransactionChargeHandler">
    <constructor-arg ref="messagePublisher"/>
  </bean>
  <bean id="refundCustomerHandler" class="application.handler.RefundCustomerHandler">
    <constructor-arg ref="messagePublisher"/>
  </bean>

  <alias name="splitKafkaPublisher" alias="messagePublisher"/>
  <alias name="kafkaConsumer" alias="messageConsumer"/>
  <alias name="guavaDispatcher" alias="dispatcher"/>
<!--  <alias name="decoratedRjs1Serializer" alias="serializer"/>-->
  <alias name="messageFamilyAwareDeserializer" alias="deserializer"/>

  <alias name="hav1Serializer" alias="serializer"/>

  <alias name="rjs1SchemaRegistryProvider" alias="rjs1SchemaProvider"/>
  <alias name="hav1SchemaRegistryProvider" alias="hav1SchemaProvider"/>

<!--  <alias name="rjs1SchemaFileProvider" alias="rjs1SchemaProvider"/>-->
<!--  <alias name="hav1SchemaFileProvider" alias="hav1SchemaProvider"/>-->
</beans>